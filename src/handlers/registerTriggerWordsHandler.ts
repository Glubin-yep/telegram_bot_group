import { Telegraf } from "telegraf";
import { TRIGGER_WORDS } from "../constants/wordLists";

const responses = [
  "üö® –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –í—ñ–¥–∫—Ä–∏–≤–∞—é –ø–æ—Ä—Ç–∞–ª–∏...",
  "üëæ –°–∫–∞–Ω–µ—Ä –≤–ª–æ–≤–∏–≤ –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –ø—Ä–æ—Ç–æ–∫–æ–ª Alpha.",
  "üßô‚Äç‚ôÇÔ∏è –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–µ –∑–∞–∫–ª—è—Ç—Ç—è –≤–∏–º–æ–≤–ª–µ–Ω–æ. –ú–∞–≥—ñ—á–Ω–∞ —Ä–∞–¥–∞ –≤–∂–µ –≤ –∫—É—Ä—Å—ñ.",
  "üï∂Ô∏è –ê–≥–µ–Ω—Ç –°–º—ñ—Ç —É–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ. –ó–∞–ª–∏—à–∞–π—Å—è –Ω–∞ –º—ñ—Å—Ü—ñ.",
  "üíæ –°–ª–æ–≤–æ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ.",
  "ü™ê –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –º—ñ–∂–≥–∞–ª–∞–∫—Ç–∏—á–Ω–∏–π –º–∞—è–∫. –ß–µ–∫–∞–π –≥–æ—Å—Ç–µ–π.",
  "üß† –°–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ –°–∏—Å—Ç–µ–º–∏. –¢–≤—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π.",
  "üïµÔ∏è‚Äç‚ôÇÔ∏è –ö–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ. –†–æ–∑–ø–æ—á–∏–Ω–∞—é –Ω–µ–≤–∏–¥–∏–º–µ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è.",
  "‚õìÔ∏è –í–∏—è–≤–ª–µ–Ω–æ –∑–±—ñ–π —É –º–µ—Ä–µ–∂–µ–≤–æ–º—É –ª–µ–∫—Å–∏–∫–æ–Ω—ñ. –Ü–Ω—ñ—Ü—ñ—é—é –∫–æ—Ä–µ–∫—Ü—ñ—é.",
  "üì¶ –í–º—ñ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ —è–¥—Ä–∞.",
  "‚ö° –ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∞ –±—É—Ä—è –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è. –¢–≤–æ—ó —Å–ª–æ–≤–∞ ‚Äî —ó—ó –ø–æ—á–∞—Ç–æ–∫.",
  "üéØ –ü–æ—Ç—Ä–∞–ø–ª—è–Ω–Ω—è –≤ —Ü—ñ–ª—å–æ–≤–µ —Å–ª–æ–≤–æ. –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞.",
  "üî¨ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –µ–∫—Å–ø—Ä–µ—Å-–∞–Ω–∞–ª—ñ–∑. –ó–º—ñ—Å—Ç –≤–∏–∫–ª–∏–∫–∞—î –∑–∞–Ω–µ–ø–æ–∫–æ—î–Ω–Ω—è.",
  "üéõÔ∏è –§—ñ–ª—å—Ç—Ä–∏ —Ç—Ä–∏–≤–æ–≥–∏ –¥–∞–ª–∏ –∑–±—ñ–π. –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä—É—á–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è.",
  "üåå –°–ª–æ–≤–∞ —Ä–µ–∑–æ–Ω—É—é—Ç—å –∑ —Ç–µ–º–Ω–æ—é –º–∞—Ç–µ—Ä—ñ—î—é. –ü–µ—Ä–µ–≤—ñ—Ä—è—é –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω—ñ—Å—Ç—å.",
  "üé≤ RNG —Å–∫–∞–∑–∞–≤ ¬´—Ç–∞–∫¬ª. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏.",
  "üìâ –†–µ–ø—É—Ç–∞—Ü—ñ–π–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∑–Ω–∏–∂–µ–Ω–æ. –û–±–µ—Ä–µ–∂–Ω—ñ—à–µ –∑ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è–º–∏.",
  "üõ∞Ô∏è –Ü–Ω—ñ—Ü—ñ–∞—Ç–∏–≤—É –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ. –¢–∏ –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ –¥–æ —ñ—Å—Ç–∏–Ω–∏.",
  "üéÆ –ì—Ä–∞–≤–µ—Ü—å –∞–∫—Ç–∏–≤—É–≤–∞–≤ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ –∫–æ–º–±–æ. –ó–∞—Å—Ç–æ—Å–æ–≤—É—é —à—Ç—Ä–∞—Ñ.",
  "üß¨ –¢–≤–æ—è —Ñ—Ä–∞–∑–∞ –ø–æ—Ä—É—à–∏–ª–∞ –º–æ–≤–Ω–∏–π –≥–µ–Ω–æ–º. –ü–æ—á–∏–Ω–∞—é –º—É—Ç–∞—Ü—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.",
];

function getTriggerReply(): string {
  return responses[Math.floor(Math.random() * responses.length)];
}

function containsTriggerWord(text: string): boolean {
  // –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä, –∞–ª–µ –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é
  const lowered = text.toLowerCase();

  for (const triggerWords of TRIGGER_WORDS) {
    const pattern = new RegExp(
      `(^|\\s|[!?,.():;"'-])${triggerWords}([!?,.():;"'-]|\\s|$)`,
      "iu",
    );
    if (pattern.test(lowered)) {
      return true;
    }
  }
  return false;
}

export function registerTriggerWordsHandler(bot: Telegraf) {
  bot.on("text", async (ctx, next) => {
    const text = ctx.message.text;
    if (!text || !containsTriggerWord(text)) {
      return next();
    }

    try {
      await ctx.deleteMessage();
    } catch (error) {
      console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
    }

    try {
      await ctx.reply(getTriggerReply());
    } catch (err) {
      console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–∏–≥–µ—Ä-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:", err);
    }

    await next();
  });
}
