import { BAD_WORDS } from "../bot"; // –∞–±–æ —à–ª—è—Ö, –∫—É–¥–∏ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞–ª–∏
import { Telegraf } from "telegraf";
import { AppDataSource } from "../db";
import { ChatUserStat } from "../entities/ChatUserStat";
import { User } from "../entities/User";

const naughtyReplies = [
  "üåö –î–æ–±—ñ –ø–æ—á—É–≤ ‚Äî –î–æ–±—ñ –∑–∞–ø–∞–º‚Äô—è—Ç–∞–≤. –ß–µ–∫–∞–π –ª–∏—Å—Ç–∞ –≤—ñ–¥ —Å–æ–≤–∏.",
  "‚ò†Ô∏è –¢–∞–∫ –Ω–µ –ª–∞—é—Ç—å—Å—è –Ω–∞–≤—ñ—Ç—å —Ç—Ä–æ–ª—ñ‚Ä¶ –ß–µ—Å–Ω–µ —Ç—Ä–æ–ª—ñ–≤—Å—å–∫–µ.",
  "ü§Ø –Ø–∫–µ —Å–æ–∫–æ–≤–∏—Ç–µ —Å–ª–æ–≤–µ—á–∫–æ! –ó–∞–ø–∏—Å—É—é –≤ –ö–Ω–∏–≥—É –¢—Ä–æ–ª—ñ–≤.",
  "üö® –õ–µ–∫—Å–∏—á–Ω–∏–π –ø–∞—Ç—Ä—É–ª—å —Å–ø—ñ–π–º–∞–≤ –ø–æ—Ä—É—à–µ–Ω–Ω—è. –î–æ–±—ñ –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ –∑ —Ä–µ–º–µ–Ω–µ–º!",
  "üí° –ù–∞–≤—ñ—Ç—å –º–∞–≥–ª—ñ–≤—Å—å–∫–∏–π –±–æ—Ç –∑–Ω–∞—î, —â–æ —Ç–∞–∫ –∫–∞–∑–∞—Ç–∏ –Ω–µ –≤–∞—Ä—Ç–æ.",
  "üïµÔ∏è‚Äç‚ôÄÔ∏è –¢–∞–∫, –î–æ–±—ñ –≤—Å–µ —á—É—î... –Ü–Ω—Ñ–æ—Ä–º—É—é –º–∞–≥—ñ—á–Ω—É –Ü–Ω–∫–≤—ñ–∑–∏—Ü—ñ—é.",
  "üé± –ù—É –π —Å–ª–æ–≤–µ—á–∫–æ! –¢–≤–æ—î –º—ñ—Å—Ü–µ –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–µ –≤ –ó–∞–ª—ñ –¢—Ä–æ–ª—ñ–≤.",
  "üëÅÔ∏è –í–µ–ª–∏–∫–∏–π –±—Ä–∞—Ç –ø–æ—á—É–≤. –°–ª–æ–≤–æ –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –ß–æ—Ä–Ω—É –ö–Ω–∏–≥—É.",
  "üó°Ô∏è –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—É. –ö—É–∑–Ω—è –°–∞—É—Ä–æ–Ω–∞ –≤—ñ–¥–ø–æ—á–∏–≤–∞—î.",
  "üë∫ –¢–≤–æ—ó –º–∞—Ç–∏ –≥—ñ–¥–Ω—ñ —Å—É–≤–æ—ó–≤ –¥–µ–º–æ–Ω–∞ –ë–∞–∞–ª–∞.",
  "üïπÔ∏è –ö–æ–¥–æ–≤–∞ —Ñ—Ä–∞–∑–∞ –ø—Ä–∏–π–Ω—è—Ç–∞ ‚Äî —Å–µ—Ä–≤–µ—Ä –≤ —à–æ—Ü—ñ.",
  "‚ò¢Ô∏è –¢–∞–∫ –Ω–µ –≥—É–¥–∏—Ç—å –Ω–∞–≤—ñ—Ç—å —Ä–µ–∞–∫—Ç–æ—Ä –ß–ê–ï–°.",
  "üëÅÔ∏è –¢–≤–æ—é –ª–∞–π–∫—É –ø–æ–±–∞—á–∏–≤ –°–∞—É—Ä–æ–Ω. –í—ñ–Ω —Å—Ö–≤–∞–ª—é—î.",
  "‚ò†Ô∏è –°–ª–æ–≤–µ—Å–Ω–∏–π —è–¥ –æ—Ç—Ä–∏–º–∞–Ω–æ ‚Äî –≥–æ—Ç—É—î–º–æ –∞–Ω—Ç–∏–¥–æ—Ç.",
  "üßô‚Äç‚ôÇÔ∏è –ú–∞–≥—ñ—á–Ω–∏–π –≤–æ–≥–æ–Ω—å —Ç–≤–æ—î—ó –ª–∞–π–∫–∏ –ø—ñ–¥–ø–∞–ª–∏–≤ –Ω–µ —Ç—ñ–ª—å–∫–∏ —á–∞—Ç, –∞–ª–µ –π –¥—É—à—É.",
  "üó°Ô∏è –¢–≤–æ—ó —Å–ª–æ–≤–∞ –≥–æ—Å—Ç—Ä—ñ—à—ñ –∑–∞ –∫–ª–∏–Ω–æ–∫ –ë–∞–∞–ª–∞.",
  "üé≤ –õ–∏—à–µ –∫—É–±–∏–∫ –¥–æ–ª—ñ –≤–∏—Ä—ñ—à—É—î, —á–∏ –≤–¥–∞—Å—Ç—å—Å—è —Ç–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç–∏ —Ç—É—Ç.",
  "ü¶á –¢–≤–æ—ó —Å–ª–æ–≤–∞ –ø–∞—Ö–Ω—É—Ç—å –∑–ª–æ–º –≥–ª–∏–±—à–µ, –Ω—ñ–∂ –ü—ñ–¥–∑–µ–º–µ–ª–ª—è.",
  "üåë –ü—ñ–¥ –ø–æ–∫—Ä–æ–≤–æ–º –Ω–æ—á—ñ –Ω–µ —Å–º—ñ–π —Ç–∞–∫ –ª–∞—è—Ç–∏—Å—å, –∞–≤–∞–Ω—Ç—é—Ä–µ—Ü—å.",
  "‚öîÔ∏è –°–ª–æ–≤–µ—Å–Ω–∏–π –ø–æ—î–¥–∏–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å ‚Äî –¶–µ–Ω–∑—É—Ä–∞.",
  "üõë –ü—ñ—Ç-—Å—Ç–æ–ø –¥–ª—è —Ç–≤–æ—ó—Ö –≤–∏—Å–ª–æ–≤–ª—é–≤–∞–Ω—å ‚Äî –ø–æ—Ä–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—å.",
  "üèÜ –ö—Ä–∞—â–∏–π —á–∞—Å –Ω–∞ –∫–æ–ª—ñ, –∞–ª–µ —Å–ª–æ–≤–µ—Å–Ω–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –ª–∞–π–∫—É.",
  "üèéÔ∏è –¢–∏ –Ω–∞ –º–µ–∂—ñ ‚Äî —Å–ª–æ–≤–∞ —à–≤–∏–¥–∫—ñ, –∞–ª–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ç—Ä—ñ–±–µ–Ω.",
  "‚ö†Ô∏è –¢–≤–æ—è –ª–∞–π–∫–∞ ‚Äî –Ω—ñ–±–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ñ–π –ø—Ä—è–º—ñ–π.",
  "üï∏Ô∏è –ó–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ –ª–µ–∫—Å–∏–∫–æ—é –≤–∏–º–∞–≥–∞—î —á–∏—Å—Ç–∫–∏ –ø–∞–∫–µ—Ç—É.",
  "üõ°Ô∏è IDS –≤–∏—è–≤–∏–≤ –∞–Ω–æ–º–∞–ª—ñ—ó –≤ —Ç–≤–æ—ó–π –º–æ–≤—ñ, –±–ª–æ–∫—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é.",
  "‚ö° –ü–æ—Ç—ñ–∫ –¥–∞–Ω–∏—Ö –∑—É–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó.",
  "üõ†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è —Ç–∞–∫–æ—ó –ø–∞–∫–µ—Ç–∏.",
  "‚ùå –ü—ñ–Ω–≥ —Ç–≤–æ–≥–æ –ª–µ–∫—Å–∏–∫–æ–Ω—É –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ–ø—É—Å—Ç–∏–º–∏–π TTL.",
  "üì° –ü—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–∏—á–µ—Ä–ø–∞–Ω–∞.",
  "üîí Firewall –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ ‚Äî —Ç–≤–æ—è –ª–∞–π–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞.",
  "‚ö†Ô∏è Warning: –≤—Ö—ñ–¥–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –¥–∞–Ω—ñ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è drop.",
  "üö´ –ü–∞–∫–µ—Ç —Ç–≤–æ—ó—Ö —Å–ª—ñ–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª—ñ—Ç–∏–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.",
  "‚öîÔ∏è –ë–æ–≥–∏ —Ö–∞–æ—Å—É —Å—Ö–≤–∞–ª—é—é—Ç—å —Ç–≤–æ—ó —Å–ª–æ–≤–∞",
];

function getRandomReply() {
  return naughtyReplies[Math.floor(Math.random() * naughtyReplies.length)];
}

function normalize(text: string): string {
  return text
    .toLowerCase()
    .replace(/[@a–∞]/g, "–∞")
    .replace(/[–µ—îe]/g, "–µ")
    .replace(/[i—ñ1!|]/g, "—ñ")
    .replace(/[o–æ0]/g, "–æ")
    .replace(/[c—Å]/g, "—Å")
    .replace(/[p—Ä]/g, "—Ä")
    .replace(/[y—É]/g, "—É")
    .replace(/[x—Ö]/g, "—Ö")
    .replace(/[^a-z–∞-—è—ë—ó—î“ë0-9]/gi, "") // –≤–∏–¥–∞–ª—è—î —Å–º—ñ—Ç—Ç—è
    .replace(/(.)\1{2,}/g, "$1"); // —Å—Ç–∏—Å–∫–∞—î –ø–æ–≤—Ç–æ—Ä–∏
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
function containsBadWord(text: string): boolean {
  const normalized = normalize(text);
  for (const badWord of BAD_WORDS) {
    if (normalized.includes(badWord)) {
      return true;
    }
  }
  return false;
}

export function registerBadWordsHandler(bot: Telegraf) {
  bot.on("text", async (ctx, next) => {
    const userId = ctx.from?.id;
    const username = ctx.from?.username || ctx.from?.first_name;
    const chatId = ctx.chat.id.toString();
    const text = ctx.message.text.toLowerCase();

    if (!userId || !chatId) {
      return next();
    }

    if (!containsBadWord(text)) {
      return next();
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    const userRepository = AppDataSource.getRepository(User);
    const chatUserStatRepository = AppDataSource.getRepository(ChatUserStat);

    let user = await userRepository.findOneBy({ telegramId: userId });
    if (!user) {
      user = userRepository.create({ telegramId: userId, username });
      await userRepository.save(user);
    }

    let chatUserStat = await chatUserStatRepository.findOne({
      where: { user, chatId },
    });
    if (!chatUserStat) {
      chatUserStat = chatUserStatRepository.create({
        user,
        chatId,
        messageCount: 0,
        badWordCount: 1,
      });
      await chatUserStatRepository.save(chatUserStat);
    } else {
      chatUserStat.badWordCount = (chatUserStat.badWordCount || 0) + 1;
      await chatUserStatRepository.save(chatUserStat);
    }

    await ctx.reply(getRandomReply());
    await next();
  });
}
