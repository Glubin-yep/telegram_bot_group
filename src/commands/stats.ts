import { Telegraf } from "telegraf";
import { User } from "../entities/User";
import { AppDataSource } from "../db";
import { ChatUserStat } from "../entities/ChatUserStat";
import { sendMessage } from "../services/messageService";

export default function stats(bot: Telegraf) {
  bot.command("stats", async (ctx) => {
    const userId = ctx.from?.id;
    const username = ctx.from?.username || ctx.from?.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
    const chatId = ctx.chat.id.toString();

    if (!userId || !chatId) {
      return sendMessage(ctx, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à ID –∞–±–æ —á–∞—Ç.");
    }

    try {
      const userRepository = AppDataSource.getRepository(User);
      const chatUserStatRepository = AppDataSource.getRepository(ChatUserStat);

      const user = await userRepository.findOneBy({ telegramId: userId });
      if (!user) {
        return sendMessage(ctx, `${username}, –≤–∞—Å –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.`);
      }

      const chatUserStat = await chatUserStatRepository.findOne({
        where: { user: { id: user.id }, chatId },
      });

      if (!chatUserStat) {
        return sendMessage(ctx,
          `${username}, –≤–∏ —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ü—å–æ–º—É —á–∞—Ç—ñ.`,
        );
      }

      sendMessage(ctx,
        `${username}, —Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ ${chatUserStat.messageCount} –º–µ—Å–µ–¥–∂—ñ–≤.\n –ó –Ω–∏—Ö ${chatUserStat.badWordCount} ‚Äî –∑ –ª–∞–π–∫–æ—é. –î–æ–±—ñ —Ü–µ —Ñ—ñ–∫—Å—É—î. –î–æ–±—ñ —Ä–æ–∑—á–∞—Ä–æ–≤–∞–Ω–∏–π. üòîüß¶`,
      );
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      sendMessage(ctx, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
    }
  });
}
