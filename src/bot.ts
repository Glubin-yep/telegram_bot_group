import { Telegraf } from "telegraf";
import { message } from "telegraf/filters";
import * as dotenv from "dotenv";

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN as string);

// –ü–∞–º º—è—Ç—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
// TODO –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ë–î
const userStats: Record<number, number> = {}; // userId -> count
const groupStats: Record<number, number> = {}; // chatId -> count
const lastUserMessage: Record<number, number> = {}; // chatId -> messageId

bot.start((ctx) => ctx.reply("Welcome"));
bot.help((ctx) =>
  ctx.reply(
    "https://github.com/Glubin-yep/telegram_bot_group/blob/main/README.md"
  )
);
bot.command("ping", (ctx) => ctx.reply("Pong!"));

bot.on("text", async (ctx, next) => {
  const chatId = ctx.chat.id;
  const msgId = ctx.message.message_id;
  const userId = ctx.from?.id;

  const isCommand = ctx.message.entities?.some(
    (e) => e.type === "bot_command" && e.offset === 0
  );

  console.log("–ó–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", msgId);
  lastUserMessage[chatId] = msgId;

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ç
  // TODO –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ë–î
  if (userId) {
    userStats[userId] = (userStats[userId] || 0) + 1;
  }

  // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —á–∞—Ç—É
  // TODO –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ë–î
  groupStats[chatId] = (groupStats[chatId] || 0) + 1;

  await next();
});

bot.hears("–ü—Ä–∏–≤—ñ—Ç –î–æ–±—ñ", (ctx) =>
  ctx.reply("–†–∞–¥–∏–π –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å, –Ω–∞–π–ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ—Ä –Ω–∞ —Å–≤—ñ—Ç—ñ")
);

bot.hears("üß¶", (ctx) => ctx.reply("–£—Ä–∞, —Ç–µ–ø–µ—Ä –î–æ–±—ñ –≤—ñ–ª—å–Ω–∏–π"));

bot.command("stats", (ctx) => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username || ctx.from?.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
  if (userId) {
    const count = userStats[userId] || 0;
    ctx.reply(`${username}, –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ ${count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.`);
  } else {
    ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à ID.");
  }
});

bot.command("groupstats", (ctx) => {
  const chatId = ctx.chat.id;
  const count = groupStats[chatId] || 0;

  let chatName: string;

  if ("title" in ctx.chat) {
    chatName = ctx.chat.title;
  } else if ("first_name" in ctx.chat) {
    chatName = ctx.chat.first_name;
  } else {
    chatName = "–¶–µ–π —á–∞—Ç";
  }

  ctx.reply(
    `${chatName} –º–∞—î ${ctx.message.message_id} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—ñ –±–æ—Ç –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–≤.`
  );
});
bot.command("source", (ctx) => {
  ctx.reply("https://github.com/Glubin-yep/telegram_bot_group");
});

// –ö–æ–º–∞–Ω–¥–∞ /ruina ‚Äî –≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
bot.command("ruina", async (ctx) => {
  console.log("–ö–æ–º–∞–Ω–¥–∞ ruina –≤–∏–∫–ª–∏–∫–∞–Ω–∞");

  const chatId = ctx.chat.id;
  const msgId = lastUserMessage[chatId];

  if (!msgId) {
    return ctx.reply("–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
  }

  try {
    await ctx.telegram.deleteMessage(chatId, msgId);
    await ctx.reply("–û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.");
  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:", e);
    ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç.");
  }
});

bot.launch();

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
